@model AccountIdentifierViewModel
<h2>
	Create account identifier</h2>
<form method="post" data-bind="submit: save">
	<fieldset>
		<legend>Account details </legend>
		<div class="editor-label">
			@Html.Label("AccountId", "Account")
		</div>
		<div class="editor-field">
			@Html.DropDownList("AccountId", Model.Accounts.Select(x => new SelectListItem { Text = x.Name, Value = x.Id, Selected = x.Id == Model.AccountId }))
		</div>
		<div>
			<table>
				<thead>
					<td>Name</td>
					<td>Properties</td>
				</thead>
				<tbody data-bind="foreach: patterns">
					<tr>
						<td>
							<select data-bind="options: availableBuilders, value: pattern, optionsText: 'name', optionsCaption: 'Please select...'"></select>
						</td>
						<td>
							<table>
								<tr data-bind="foreach: pattern().properties">
									<td data-bind="text: key"></td>
								</tr>
								<tr data-bind="foreach: pattern().properties">
									<td><input type="text" data-bind="value: value" /></td>
								</tr>
							</table>
						</td>
						<td><a href="#" data-bind="click: $root.removePattern">X</a></td>
					</tr>
				</tbody>
			</table>
		</div>
		<div>
			<a data-bind="click: addPattern">Add</a>
		</div>
		<p>
			<input type="submit" value="Send" />
		</p>
	</fieldset>
</form>

<script type="text/javascript">
	var builders = @Html.Raw(Model
		.AvailablePatterns
		.Select(x => new 
		{
			 id = x.Name, 
			 name = x.Name, 
			 properties = x.Properties.Select(p => new { key = p.Key, value = "" }) 
		}).ToJson());
	
	// Class to represent a row in the patterns
	function Pattern(p) {
		var self = this;

		self.availableBuilders = builders.map(function(b) {
			var clone = _.clone(b);
			clone.properties = _(b.properties).map(function(p) {
				return _.clone(p);
			});
			return clone;
		});

		self.pattern = ko.observable(self.availableBuilders[0]);		
	}

	// Overall viewmodel for this screen, along with initial state
	function AccountIdentifierViewModel() {
		var self = this;

		// Editable data
		self.patterns = ko.observableArray([]);

		// Operations
		self.addPattern = function() {
			var p = new Pattern();
			self.patterns.push(p);
		};
		self.removePattern = function(p) {
			self.patterns.remove(p);
		};

		self.save = function() {

			var patterns = [];
			
			var koPatterns = self.patterns();
			
			for(var i=0; i < koPatterns.length; i++) {
				patterns.push({ Name: koPatterns[i].pattern().name, Properties: koPatterns[i].pattern().properties });
			}
			
			$.ajax({
				url: location.href,
				contentType: 'application/json; charset=utf-8',
				type: "POST",
				data: JSON.stringify({
					args: {
						AccountId: $('#AccountId').val(),
						Patterns: patterns
					}
				}),
				dataType: 'json',
				success: function(result) {
					$('#exception').html(null).hide();
					if (result) {
						if (result.redirectUrl) {
							window.location = result.redirectUrl;
						}
					}
				},
				error: function(xhr, ajaxOptions, thrownError) {
					$('#exception').html(xhr.responseText).show();
					alert(xhr.statusText);
				}
			});
		};
	}

	var vm = new AccountIdentifierViewModel();
	ko.applyBindings(vm);
</script>