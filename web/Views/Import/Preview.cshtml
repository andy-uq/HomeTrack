@model ImportPreview
<h2>@Model.Import.ImportType</h2>

@{
	var importRows = Model.Import.GetData().ToArray();
	int count = importRows.Count();
	int matched = 0;

	var accountSelectList = Model.Accounts.AsSelectList(v => v.Id);
}

@if ( !Model.AccountIdentifiers.Any() )
{
	<p class="is-error">
		You do not have any active account identifiers.
	</p>
}

<table>
	<thead>
		<tr>
			<td>
				Date
			</td>
			@foreach ( var p in @Model.Import.GetPropertyNames() )
   {
				<td>@p</td>
   }
			<td>
				Cr
			</td>
			<td>
				Dr
			</td>
			<td></td>
		</tr>
	</thead>
	<tbody>
		@foreach ( var row in importRows )
  {
	  var props = row.Properties.ToDictionary(p => p.Key, p => p.Value);
	  var account = row.IdentifyAccount(Model.AccountIdentifiers);
	  if ( account != null )
	  {
		  matched++;
	  }
	  
			<tr @Html.Raw(account == null ? "" : string.Format("class='has-account {0}'", account.Type.ToString().ToLower())) >
				<td>
					@row.Date.ToString("yyyy-M-d")
				</td>
				@foreach ( var p in @Model.Import.GetPropertyNames() )
	{
					<td>@props[p]
					</td>
	}
				<td>
					@AccountType.Asset.ToCr(row.Amount).AsAmount()
				</td>
				<td>
					@AccountType.Asset.ToDr(row.Amount).AsAmount()
				</td>
				<td>
					@(account == null ? "" : account.Name)
				</td>
			</tr>
  }
	</tbody>
	<tfoot>
		<td colspan="@(4 + Model.Import.GetPropertyNames().Count())">Matched @matched of @count (@(((double)matched / count * 100.0).ToString("n2"))%)</td>
	</tfoot>
</table>

@using ( Html.BeginForm("Import", controllerName:null, routeValues:new{ filename = Model.FileName }) )
{
	@Html.ValidationSummary(true)

	<fieldset>
		<legend>
			Account details
		</legend>
		<div class="editor-label"> 
			@Html.Label("destinationAccountId", "Destination") 
		</div> 
		<div class="editor-field"> 
			@Html.DropDownList("destinationAccountId", accountSelectList, "Select an account to import into")
			@Html.ValidationMessage("destinationAccountId") 
		</div>        
		<div class="editor-label"> 
			@Html.Label("unclassifiedAccountId", "Unclassifed Expense Account") 
		</div> 
		<div class="editor-field"> 
			@Html.DropDownList("unclassifiedAccountId", accountSelectList, "Select an account to hold unclassified transactions")
			@Html.ValidationMessage("unclassifiedAccountId") 
		</div>        
		<p> 
			<input type="submit" value="Import" /> 
		</p> 
	</fieldset>
}