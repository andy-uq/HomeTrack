@model ImportPreview
<h2>@Model.Import.ImportType</h2>

@{
	var importRows = Model.Import.GetData().ToArray();
	int count = importRows.Count();
	int matched = 0;

	var accountSelectList = Model.Accounts.AsSelectList(v => v.Id);
	var import =
		(
			from row in importRows
			let props = row.Properties.ToDictionary(p => p.Key, p => p.Value)
			let account = row.IdentifyAccount(Model.AccountIdentifiers)
			select new
			{
				id = row.Id,
				account = account == null ? null : account.Id,
				date = row.Date,
				drAmount = AccountType.Asset.ToDr(row.Amount),
				crAmount = AccountType.Asset.ToCr(row.Amount),			
				props
			}
		);
}

@if ( !Model.AccountIdentifiers.Any() )
{
	<p class="is-error">
		You do not have any active account identifiers.
	</p>
}

<table id="import-preview">
	<thead>
		<tr>
			<td>
				Date
			</td>
@foreach ( var p in @Model.Import.GetPropertyNames() )
{
	<td>@p</td>
}
			<td>
				Cr
			</td>
			<td>
				Dr
			</td>
			<td></td>
		</tr>
	</thead>
	<tbody data-bind="foreach: data">
		<tr data-bind="class:accountClass">
			<td data-bind="text: date"></td>
			@foreach ( var p in @Model.Import.GetPropertyNames() )
			{
				<td data-bind="text: props['@p']"></td>
			}			
			<td data-bind="text: drAmount"></td>
			<td data-bind="text: crAmount"></td>
			<td><select data-bind="options: $root.availableAccounts, value: account, optionsText: 'Name', optionsValue: 'Id', optionsCaption: 'Please select...'"></select></td>
			<td><img style="width:32px;height:32px" src="@Url.Content("~/Content/Images/tick.png")" data-bind="visible:account() != null" /></td>
			<td data-bind="text:accountClass"></td>
		</tr>
	</tbody>
	<tfoot>
		<tr>
			<td colspan="@(4 + Model.Import.GetPropertyNames().Count())">
				
		  </td>
		</tr>
	</tfoot>
</table>

@using ( Html.BeginForm("Import", controllerName:null, routeValues:new{ filename = Model.FileName }) )
{
	@Html.ValidationSummary(true)

	<fieldset>
		<legend>
			Account details
		</legend>
		<div class="editor-label"> 
			@Html.Label("destinationAccountId", "Destination") 
		</div> 
		<div class="editor-field"> 
			@Html.DropDownList("destinationAccountId", accountSelectList, "Select an account to import into")
			@Html.ValidationMessage("destinationAccountId") 
		</div>        
		<div class="editor-label"> 
			@Html.Label("unclassifiedAccountId", "Unclassifed Expense Account") 
		</div> 
		<div class="editor-field"> 
			@Html.DropDownList("unclassifiedAccountId", accountSelectList, "Select an account to hold unclassified transactions")
			@Html.ValidationMessage("unclassifiedAccountId") 
		</div>        
		<p> 
			<input type="submit" value="Import" /> 
		</p> 
	</fieldset>
}

<script type="text/javascript">
	var accounts = @Html.Raw(Model.Accounts.ToJson());
	var importData = @Html.Raw(import.ToJson());
	
	function Import(row) {
		var self = this;
		self.date = row.date;
		self.props = row.props;
		self.drAmount = row.drAmount;
		self.crAmount = row.crAmount;
		self.account = ko.observable(row.account);
		self.accountClass = ko.computed(function() {
			if (!self.account())
				return null;
				
			var account = _(accounts).find(function(i) {
				return i.Id === self.account();
			});
			var foo = 'has-account ' + account.Type;
			console.log(foo);
			return foo;
		});
	}

	// Overall viewmodel for this screen, along with initial state
	function ImportViewModel() {
		var self = this;

		// Non-editable account data - from the server
		self.availableAccounts = accounts;

		// Editable data
		self.data = ko.observableArray(importData.map(function (i) {
			return new Import(i);
		}));

		self.save = function() {

			var relatedAccounts = new Array();
			for(var i=0; i < self.accounts().length; i++)
				relatedAccounts.push({ AccountId: self.accounts()[i].account.id, amount: self.accounts()[i].amount() });

			$.ajax({
				url: location.href,
				contentType: 'application/json; charset=utf-8',
				type: "POST",
				data: JSON.stringify({
					newTransaction: {
						Amount: self.amount(),
						Description: self.description(),
						Direction: self.direction(),
						Date: self.date(),
						Related: relatedAccounts
					}
				}),
				dataType: 'json',
				success: function(result) {
					$('#exception').html(null).hide();
					if (result) {
						if (result.redirectUrl) {
							window.location = result.redirectUrl;
						}
					}
				},
				error: function(xhr, ajaxOptions, thrownError) {
					$('#exception').html(xhr.responseText).show();
					alert(xhr.statusText);
				}
			});
		};
	}

	var vm = new ImportViewModel();
	ko.applyBindings(vm);
</script>